import discord
from discord.ext import commands
from datetime import datetime, timezone
import random
import aiohttp
from PIL import Image, ImageDraw
import io
import os

# Configuraci√≥n de canales
WELCOME_CHANNEL_ID = 1400106792821981247  # ID del canal de bienvenida espec√≠fico
GENERAL_CHANNEL_ID = 1400106792821981253   # ID del canal general

# Configuraci√≥n de roles
BASE_ROLE_ID = 1400106792196898888  # Rol base que se revisa
AUTO_ROLE_ID = 1406360634643316746  # Rol que se asigna autom√°ticamente
RANGO_PREFIX = "‚óà Rango"  # Prefijo de roles de rango

class WelcomeSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
        # Lista de mensajes de bienvenida aleatorios
        self.welcome_messages = [
            "Te damos la bienvenida! Esperamos que hayas tra√≠do pizza. üçï",
            "¬°Un nuevo aventurero se ha unido a nosotros! üéâ",
            "¬°Bienvenido/a! Que comience la diversi√≥n. üéä",
            "¬°Genial! Otro miembro incre√≠ble se ha unido. ‚ú®",
            "¬°Hola! Espero que te sientas como en casa. üè†",
            "¬°Bienvenido/a al mejor servidor de Discord! üåü",
            "¬°Un nuevo amigo ha llegado! ¬°Dale la bienvenida! üëã"
        ]
        
        # Ruta de la imagen de fondo espec√≠fica
        self.background_image = "resources/images/welcome.png"
        self.background_dir = "resources/images"
        
        # Crear directorio si no existe
        os.makedirs(self.background_dir, exist_ok=True)
        
        # ‚ïê‚ïê‚ïê CONFIGURACI√ìN DE AVATAR ‚ïê‚ïê‚ïê
        # Tama√±o del avatar (en p√≠xeles)
        self.avatar_size = 200
        
        # Posici√≥n del avatar
        self.avatar_position = "center"  # "center", "top", "bottom", "custom"
        
        # Para posici√≥n personalizada
        self.avatar_x_offset = 0  # Desplazamiento horizontal
        self.avatar_y_offset = 0  # Desplazamiento vertical
        
        # Configuraci√≥n del borde del avatar
        self.avatar_border_size = 0  # Tama√±o del borde en p√≠xeles (0 para sin borde)
        self.avatar_border_color = (255, 255, 255, 255)

    # ‚ïê‚ïê‚ïê FUNCIONES DE GESTI√ìN DE ROLES ‚ïê‚ïê‚ïê
    
    async def check_and_assign_auto_role(self, member):
        """Verifica si el usuario tiene el rol base y le asigna el rol autom√°tico si no tiene rol de rango"""
        try:
            base_role = member.guild.get_role(BASE_ROLE_ID)
            auto_role = member.guild.get_role(AUTO_ROLE_ID)
            
            if not base_role or not auto_role:
                print(f"‚ö†Ô∏è Roles no encontrados - Base: {base_role}, Auto: {auto_role}")
                return
            
            # Verificar si tiene el rol base
            if base_role in member.roles:
                # Verificar si NO tiene rol de rango
                has_rango_role = any(role.name.startswith(RANGO_PREFIX) for role in member.roles)
                
                if not has_rango_role and auto_role not in member.roles:
                    await member.add_roles(auto_role, reason="Asignaci√≥n autom√°tica - sin rol de rango")
                    print(f"‚úÖ Rol autom√°tico asignado a {member.display_name}")
                    
        except Exception as e:
            print(f"‚ùå Error asignando rol autom√°tico a {member.display_name}: {e}")

    async def check_and_remove_auto_role(self, member, after_roles):
        """Verifica si se a√±adi√≥ un rol de rango y remueve el rol autom√°tico"""
        try:
            base_role = member.guild.get_role(BASE_ROLE_ID)
            auto_role = member.guild.get_role(AUTO_ROLE_ID)
            
            if not base_role or not auto_role:
                return
            
            # Verificar si tiene el rol base
            if base_role in member.roles:
                # Verificar si tiene rol de rango en los roles actuales
                has_rango_role = any(role.name.startswith(RANGO_PREFIX) for role in after_roles)
                
                if has_rango_role and auto_role in member.roles:
                    await member.remove_roles(auto_role, reason="Removido autom√°ticamente - usuario tiene rol de rango")
                    print(f"‚úÖ Rol autom√°tico removido de {member.display_name} (tiene rol de rango)")
                    
        except Exception as e:
            print(f"‚ùå Error removiendo rol autom√°tico de {member.display_name}: {e}")

    async def bulk_check_auto_roles(self, guild):
        """Revisa todos los miembros del servidor para aplicar las reglas de roles"""
        try:
            base_role = guild.get_role(BASE_ROLE_ID)
            auto_role = guild.get_role(AUTO_ROLE_ID)
            
            if not base_role or not auto_role:
                print("‚ö†Ô∏è Roles no encontrados para revisi√≥n masiva")
                return
            
            members_with_base_role = [member for member in guild.members if base_role in member.roles]
            print(f"üîç Revisando {len(members_with_base_role)} miembros con rol base...")
            
            for member in members_with_base_role:
                has_rango_role = any(role.name.startswith(RANGO_PREFIX) for role in member.roles)
                
                if has_rango_role and auto_role in member.roles:
                    # Remover rol autom√°tico si tiene rol de rango
                    await member.remove_roles(auto_role, reason="Revisi√≥n masiva - tiene rol de rango")
                    print(f"üì§ Removido rol autom√°tico de {member.display_name}")
                    
                elif not has_rango_role and auto_role not in member.roles:
                    # A√±adir rol autom√°tico si no tiene rol de rango
                    await member.add_roles(auto_role, reason="Revisi√≥n masiva - sin rol de rango")
                    print(f"üì• Asignado rol autom√°tico a {member.display_name}")
                    
        except Exception as e:
            print(f"‚ùå Error en revisi√≥n masiva de roles: {e}")

    # ‚ïê‚ïê‚ïê EVENTOS DE DISCORD ‚ïê‚ïê‚ïê
    
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Evento que se ejecuta cuando un nuevo miembro se une al servidor"""
        await self.send_welcome_message(member)
        await self.send_general_welcome(member)
        # Verificar y asignar rol autom√°tico despu√©s de un breve delay
        await asyncio.sleep(1)
        await self.check_and_assign_auto_role(member)

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """Evento que se ejecuta cuando se actualizan los roles de un miembro"""
        # Verificar si se a√±adieron roles
        if before.roles != after.roles:
            # Verificar si se a√±adi√≥ un rol de rango
            new_roles = set(after.roles) - set(before.roles)
            rango_role_added = any(role.name.startswith(RANGO_PREFIX) for role in new_roles)
            
            if rango_role_added:
                await self.check_and_remove_auto_role(after, after.roles)
            else:
                # Si se removieron roles, verificar si necesita el rol autom√°tico
                removed_roles = set(before.roles) - set(after.roles)
                rango_role_removed = any(role.name.startswith(RANGO_PREFIX) for role in removed_roles)
                
                if rango_role_removed:
                    await self.check_and_assign_auto_role(after)

    # ‚ïê‚ïê‚ïê FUNCIONES DE IMAGEN ‚ïê‚ïê‚ïê

    async def download_avatar(self, user):
        """Descarga el avatar del usuario"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(str(user.display_avatar.url)) as response:
                    if response.status == 200:
                        return await response.read()
                    return None
        except Exception as e:
            print(f"‚ùå Error descargando avatar: {e}")
            return None

    def create_circular_avatar(self, avatar_bytes, size=None):
        """Crea un avatar circular con borde configurable"""
        if size is None:
            size = self.avatar_size
            
        try:
            avatar = Image.open(io.BytesIO(avatar_bytes))
            avatar = avatar.convert("RGBA")
            avatar = avatar.resize((size, size), Image.Resampling.LANCZOS)
            
            # Crear m√°scara circular
            mask = Image.new("L", (size, size), 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, size, size), fill=255)
            
            # Crear imagen circular
            output = Image.new("RGBA", (size, size), (0, 0, 0, 0))
            output.paste(avatar, (0, 0))
            output.putalpha(mask)
            
            # Agregar borde si est√° configurado
            if self.avatar_border_size > 0:
                border_size = self.avatar_border_size
                bordered_size = size + (border_size * 2)
                bordered = Image.new("RGBA", (bordered_size, bordered_size), (0, 0, 0, 0))
                
                # Dibujar c√≠rculo de borde
                draw_border = ImageDraw.Draw(bordered)
                draw_border.ellipse([0, 0, bordered_size-1, bordered_size-1], 
                                  fill=self.avatar_border_color, outline=self.avatar_border_color)
                
                # Pegar avatar encima del borde
                bordered.paste(output, (border_size, border_size), output)
                return bordered
            
            return output
            
        except Exception as e:
            print(f"‚ùå Error creando avatar circular: {e}")
            return None

    def calculate_avatar_position(self, bg_width, bg_height, avatar_width, avatar_height):
        """Calcula la posici√≥n del avatar seg√∫n la configuraci√≥n"""
        if self.avatar_position == "center":
            x = (bg_width - avatar_width) // 2
            y = (bg_height - avatar_height) // 2
        elif self.avatar_position == "top":
            x = (bg_width - avatar_width) // 2
            y = avatar_height // 2
        elif self.avatar_position == "bottom":
            x = (bg_width - avatar_width) // 2
            y = bg_height - avatar_height - (avatar_height // 2)
        elif self.avatar_position == "custom":
            center_x = (bg_width - avatar_width) // 2
            center_y = (bg_height - avatar_height) // 2
            x = center_x + self.avatar_x_offset
            y = center_y + self.avatar_y_offset
        else:
            x = (bg_width - avatar_width) // 2
            y = (bg_height - avatar_height) // 2
        
        # Asegurar que el avatar no se salga de la imagen
        x = max(0, min(x, bg_width - avatar_width))
        y = max(0, min(y, bg_height - avatar_height))
        
        return x, y

    async def create_welcome_image(self, member):
        """Crea una imagen de bienvenida con avatar superpuesto"""
        try:
            # Verificar que existe la imagen de fondo
            if not os.path.exists(self.background_image):
                print(f"‚ö†Ô∏è Imagen de fondo no encontrada: {self.background_image}")
                return None
            
            # Cargar imagen de fondo
            background = Image.open(self.background_image).convert("RGBA")
            
            # Redimensionar fondo si es muy grande
            bg_width, bg_height = background.size
            if bg_width > 1000:
                ratio = 1000 / bg_width
                new_height = int(bg_height * ratio)
                background = background.resize((1000, new_height), Image.Resampling.LANCZOS)
                bg_width, bg_height = background.size
            
            # Descargar avatar del usuario
            avatar_bytes = await self.download_avatar(member)
            if not avatar_bytes:
                print(f"‚ö†Ô∏è No se pudo descargar el avatar de {member.display_name}")
                return None
            
            # Crear avatar circular con tama√±o configurado
            avatar_size = self.avatar_size
            avatar = self.create_circular_avatar(avatar_bytes, size=avatar_size)
            
            if not avatar:
                return None
            
            # Calcular posici√≥n del avatar
            avatar_x, avatar_y = self.calculate_avatar_position(bg_width, bg_height, avatar.width, avatar.height)
            
            # Pegar avatar en la posici√≥n calculada
            background.paste(avatar, (avatar_x, avatar_y), avatar)
            
            # Convertir a bytes para enviar
            img_bytes = io.BytesIO()
            background.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            
            return img_bytes
            
        except Exception as e:
            print(f"‚ùå Error creando imagen de bienvenida: {e}")
            return None

    async def create_join_visual(self, member):
        """Crea imagen usando welcome-general.png como base y a√±ade avatares circulares"""
        try:
            # Cargar imagen base
            base_image_path = "resources/images/welcome-general.png"
            
            try:
                img = Image.open(base_image_path).convert("RGBA")
            except FileNotFoundError:
                print(f"‚ùå No se encontr√≥ la imagen base: {base_image_path}")
                return None
            
            # Obtener dimensiones de la imagen base
            width, height = img.size
            
            # Descargar avatar del usuario que se une
            user_avatar_bytes = await self.download_avatar(member)
            
            # Descargar logo del servidor
            server_avatar_bytes = None
            if member.guild.icon:
                async with aiohttp.ClientSession() as session:
                    async with session.get(str(member.guild.icon.url)) as response:
                        if response.status == 200:
                            server_avatar_bytes = await response.read()
            
            # Tama√±o de los avatares circulares
            avatar_size = 65  # Ajusta seg√∫n el tama√±o de tu imagen base
            
            # Posiciones (ajusta seg√∫n tu imagen)
            # Usuario a la derecha
            user_x = width - avatar_size - 540
            user_y = (height - avatar_size) // 2 + 15
            
            # Servidor a la izquierda  
            server_x = 543
            server_y = (height - avatar_size) // 2 - 50
            
            # Funci√≥n para hacer imagen circular
            def make_circular(image, size):
                # Redimensionar
                image = image.resize((size, size), Image.Resampling.LANCZOS)
                
                # Crear m√°scara circular
                mask = Image.new("L", (size, size), 0)
                mask_draw = ImageDraw.Draw(mask)
                mask_draw.ellipse((0, 0, size, size), fill=255)
                
                # Aplicar m√°scara
                image.putalpha(mask)
                return image
            
            # Agregar avatar del usuario (derecha)
            if user_avatar_bytes:
                user_avatar = Image.open(io.BytesIO(user_avatar_bytes)).convert("RGBA")
                user_avatar_circular = make_circular(user_avatar, avatar_size)
                img.paste(user_avatar_circular, (user_x, user_y), user_avatar_circular)
            
            # Agregar logo del servidor (izquierda)
            if server_avatar_bytes:
                server_avatar = Image.open(io.BytesIO(server_avatar_bytes)).convert("RGBA")
                server_avatar_circular = make_circular(server_avatar, avatar_size)
                img.paste(server_avatar_circular, (server_x, server_y), server_avatar_circular)
            
            # Convertir a bytes
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            
            return img_bytes
            
        except Exception as e:
            print(f"‚ùå Error creando visual: {e}")
            return None

    # ‚ïê‚ïê‚ïê FUNCIONES DE MENSAJES ‚ïê‚ïê‚ïê

    async def send_welcome_message(self, member):
        """Env√≠a mensaje de bienvenida con imagen personalizada"""
        channel = self.bot.get_channel(WELCOME_CHANNEL_ID)
        if not channel:
            print(f"‚ùå Canal de bienvenida {WELCOME_CHANNEL_ID} no encontrado")
            return
        
        # Seleccionar mensaje aleatorio
        welcome_text = random.choice(self.welcome_messages)
        
        # Crear imagen personalizada con avatar superpuesto
        welcome_image = await self.create_welcome_image(member)
        
        embed = discord.Embed(
            title=f"¬°Bienvenido/a {member.display_name}! üéâ",
            description=welcome_text,
            color=0x00ffff,
            timestamp=datetime.now(timezone.utc)
        )
        
        try:
            if welcome_image:
                # Enviar imagen personalizada con avatar superpuesto
                file = discord.File(welcome_image, filename="welcome.png")
                embed.set_image(url="attachment://welcome.png")
                await channel.send(embed=embed, file=file)
                print(f"‚úÖ Bienvenida con imagen personalizada enviada para {member.display_name}")
            else:
                # Fallback: imagen de fondo sin avatar superpuesto
                if os.path.exists(self.background_image):
                    with open(self.background_image, 'rb') as f:
                        file = discord.File(f, filename="welcome_bg.png")
                        embed.set_image(url="attachment://welcome_bg.png")
                        embed.set_thumbnail(url=member.display_avatar.url)
                        await channel.send(embed=embed, file=file)
                        print(f"‚úÖ Bienvenida b√°sica enviada para {member.display_name}")
                else:
                    # √öltimo fallback: solo avatar
                    embed.set_image(url=member.display_avatar.url)
                    await channel.send(embed=embed)
                    print(f"‚úÖ Bienvenida simple enviada para {member.display_name}")
            
        except Exception as e:
            print(f"‚ùå Error enviando mensaje de bienvenida: {e}")
            # √öltimo fallback silencioso
            embed.set_thumbnail(url=member.display_avatar.url)
            await channel.send(embed=embed)

    async def send_general_welcome(self, member):
        """Env√≠a mensaje de bienvenida con imagen personalizada"""
        channel = self.bot.get_channel(GENERAL_CHANNEL_ID)
        if not channel:
            print(f"‚ùå Canal general {GENERAL_CHANNEL_ID} no encontrado")
            return
        
        # Crear imagen visual
        join_visual = await self.create_join_visual(member)
        
        # Crear embed
        embed = discord.Embed(
        description=f"{member.mention} ha llegado al reino, brind√©mosle una gran bienvenida! üéâ",
        color=0x7289da
        )

        # Enviar embed con imagen
        if join_visual:
            file = discord.File(join_visual, filename="welcome.png")
            embed.set_image(url="attachment://welcome.png")
            await channel.send(embed=embed, file=file)
        else:
            # Fallback si no se puede crear la imagen
            embed.description = f"{member.mention} se uni√≥ al servidor"
            await channel.send(embed=embed)

    # ‚ïê‚ïê‚ïê COMANDOS DE ADMINISTRADOR ‚ïê‚ïê‚ïê

    @commands.command(name="roles_check")
    @commands.has_permissions(administrator=True)
    async def check_roles_status(self, ctx):
        """Muestra el estado de los roles autom√°ticos"""
        base_role = ctx.guild.get_role(BASE_ROLE_ID)
        auto_role = ctx.guild.get_role(AUTO_ROLE_ID)
        
        embed = discord.Embed(
            title="üé≠ Estado de Roles Autom√°ticos",
            color=0x00ffff,
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.add_field(
            name="üéØ Rol Base",
            value=f"{base_role.mention if base_role else '‚ùå No encontrado'}\nID: `{BASE_ROLE_ID}`",
            inline=True
        )
        
        embed.add_field(
            name="‚öôÔ∏è Rol Autom√°tico",
            value=f"{auto_role.mention if auto_role else '‚ùå No encontrado'}\nID: `{AUTO_ROLE_ID}`",
            inline=True
        )
        
        embed.add_field(
            name="üëë Prefijo de Rango",
            value=f"`{RANGO_PREFIX}`",
            inline=True
        )
        
        if base_role:
            members_with_base = len([m for m in ctx.guild.members if base_role in m.roles])
            embed.add_field(
                name="üìä Estad√≠sticas",
                value=f"Miembros con rol base: **{members_with_base}**",
                inline=False
            )
        
        embed.add_field(
            name="üìã Comandos",
            value="`!roles_check` - Ver estado\n`!roles_fix` - Arreglar roles\n`!roles_simulate @usuario` - Simular asignaci√≥n",
            inline=False
        )
        
        await ctx.send(embed=embed)

    @commands.command(name="roles_fix")
    @commands.has_permissions(administrator=True)
    async def fix_roles(self, ctx):
        """Arregla los roles autom√°ticos de todos los miembros"""
        await ctx.send("üîß Iniciando revisi√≥n masiva de roles...")
        await self.bulk_check_auto_roles(ctx.guild)
        await ctx.send("‚úÖ Revisi√≥n masiva completada. Verifica los logs para detalles.")

    @commands.command(name="roles_simulate")
    @commands.has_permissions(administrator=True)
    async def simulate_role_assignment(self, ctx, member: discord.Member):
        """Simula la asignaci√≥n de rol para un miembro espec√≠fico"""
        base_role = ctx.guild.get_role(BASE_ROLE_ID)
        auto_role = ctx.guild.get_role(AUTO_ROLE_ID)
        
        if not base_role or not auto_role:
            await ctx.send("‚ùå Uno o ambos roles no fueron encontrados.")
            return
        
        embed = discord.Embed(
            title=f"üé≠ Simulaci√≥n de Roles para {member.display_name}",
            color=0x00ffff
        )
        
        has_base = base_role in member.roles
        has_auto = auto_role in member.roles
        has_rango = any(role.name.startswith(RANGO_PREFIX) for role in member.roles)
        
        embed.add_field(name="üë§ Usuario", value=member.mention, inline=False)
        embed.add_field(name="üéØ Tiene rol base", value="‚úÖ" if has_base else "‚ùå", inline=True)
        embed.add_field(name="‚öôÔ∏è Tiene rol autom√°tico", value="‚úÖ" if has_auto else "‚ùå", inline=True)
        embed.add_field(name="üëë Tiene rol de rango", value="‚úÖ" if has_rango else "‚ùå", inline=True)
        
        # L√≥gica de decisi√≥n
        if has_base:
            if has_rango and has_auto:
                action = "üîÑ Se deber√≠a REMOVER el rol autom√°tico"
            elif not has_rango and not has_auto:
                action = "‚ûï Se deber√≠a ASIGNAR el rol autom√°tico"
            elif has_rango and not has_auto:
                action = "‚úÖ Estado correcto (tiene rango, no tiene autom√°tico)"
            elif not has_rango and has_auto:
                action = "‚úÖ Estado correcto (no tiene rango, tiene autom√°tico)"
            else:
                action = "‚ùì Estado indeterminado"
        else:
            action = "‚ö†Ô∏è No tiene rol base, no se aplican reglas"
        
        embed.add_field(name="üìã Acci√≥n requerida", value=action, inline=False)
        
        await ctx.send(embed=embed)

    @commands.command(name="help_welcome", aliases=["ayuda_bienvenida", "welcome_help"])
    async def help_welcome(self, ctx):
        """Muestra ayuda completa sobre el sistema de bienvenida"""
        embed = discord.Embed(
            title="üéâ Sistema de Bienvenida - Gu√≠a Completa",
            description="Sistema autom√°tico de bienvenida con im√°genes personalizadas, avatares superpuestos y gesti√≥n de roles.",
            color=0x00ffff
        )
        
        # Comandos de Administrador - Configuraci√≥n
        embed.add_field(
            name="‚öôÔ∏è Comandos de Configuraci√≥n",
            value=(
                "`!welcome_config` - Ver configuraci√≥n actual del sistema\n"
                "`!welcome_test` - Probar el sistema de bienvenida\n"
                "`!welcome_avatar` - Ver configuraci√≥n de avatar\n"
                "`!welcome_avatar size <p√≠xeles>` - Cambiar tama√±o del avatar\n"
                "`!welcome_avatar position <posici√≥n>` - Cambiar posici√≥n del avatar\n"
                "`!welcome_avatar offset <x> <y>` - Ajustar posici√≥n personalizada\n"
                "`!welcome_avatar border <p√≠xeles>` - Configurar borde del avatar"
            ),
            inline=False
        )
        
        # Comandos de Roles
        embed.add_field(
            name="üé≠ Comandos de Roles",
            value=(
                "`!roles_check` - Ver estado de roles autom√°ticos\n"
                "`!roles_fix` - Arreglar roles de todos los miembros\n"
                "`!roles_simulate @usuario` - Simular asignaci√≥n de rol"
            ),
            inline=False
        )
        
        # Sistema de Roles
        embed.add_field(
            name="üéØ Sistema de Roles Autom√°tico",
            value=(
                f"**Rol Base:** <@&{BASE_ROLE_ID}>\n"
                f"**Rol Autom√°tico:** <@&{AUTO_ROLE_ID}>\n"
                f"**Prefijo de Rango:** `{RANGO_PREFIX}`\n\n"
                "**Reglas:**\n"
                "‚Ä¢ Si tienes rol base y NO tienes rol de rango ‚Üí Se asigna rol autom√°tico\n"
                "‚Ä¢ Si tienes rol base y S√ç tienes rol de rango ‚Üí Se remueve rol autom√°tico"
            ),
            inline=False
        )
        
        # Posiciones de Avatar
        embed.add_field(
            name="üìç Posiciones de Avatar Disponibles",
            value=(
                "`center` - Centro de la imagen\n"
                "`top` - Parte superior\n"
                "`bottom` - Parte inferior\n"
                "`custom` - Posici√≥n personalizada (usa offset)"
            ),
            inline=False
        )
        
        # Configuraci√≥n de Archivos
        embed.add_field(
            name="üìÅ Archivos Requeridos",
            value=(
                "**Imagen Principal:** `resources/images/welcome.png`\n"
                "**Imagen General:** `resources/images/welcome-general.png`\n"
                "**Directorio:** Se crea autom√°ticamente si no existe\n"
                "**Formatos:** PNG recomendado para transparencias"
            ),
            inline=False
        )
        
        # Canales Configurados
        embed.add_field(
            name="üì¢ Canales del Sistema",
            value=(
                f"**Canal de Bienvenida:** <#{WELCOME_CHANNEL_ID}>\n"
                f"**Canal General:** <#{GENERAL_CHANNEL_ID}>\n"
                "üí° Los IDs se configuran en el c√≥digo del bot"
            ),
            inline=False
        )
        
        # Caracter√≠sticas del Sistema
        embed.add_field(
            name="‚ú® Caracter√≠sticas",
            value=(
                "üé® **Im√°genes personalizadas** con avatar superpuesto\n"
                "üìÑ **Mensajes aleatorios** de bienvenida\n"
                "‚öôÔ∏è **Avatar configurable** (tama√±o, posici√≥n, borde)\n"
                "üñºÔ∏è **Doble canal** (bienvenida dedicada + general)\n"
                "üéØ **Fallback autom√°tico** si fallan las im√°genes\n"
                "üëë **Logo del servidor** incluido en imagen general\n"
                "üé≠ **Gesti√≥n autom√°tica de roles** con reglas personalizadas"
            ),
            inline=False
        )
        
        embed.set_footer(text="üí° Usa !welcome_test para probar el sistema | Sistema de Bienvenida v3.0")
        
        await ctx.send(embed=embed)

    @commands.command(name="welcome_test")
    @commands.has_permissions(administrator=True)
    async def test_welcome(self, ctx):
        """Prueba el sistema de bienvenida con el usuario actual"""
        await ctx.send("üß™ Probando sistema de bienvenida...")
        await self.send_welcome_message(ctx.author)
        await self.send_general_welcome(ctx.author)
        await ctx.send("‚úÖ Test de bienvenida completado. Revisa los canales configurados.")

    @commands.command(name="welcome_config")
    @commands.has_permissions(administrator=True)
    async def welcome_config(self, ctx):
        """Muestra la configuraci√≥n actual del sistema de bienvenida"""
        welcome_channel = self.bot.get_channel(WELCOME_CHANNEL_ID)
        general_channel = self.bot.get_channel(GENERAL_CHANNEL_ID)
        background_exists = os.path.exists(self.background_image)
        base_role = ctx.guild.get_role(BASE_ROLE_ID)
        auto_role = ctx.guild.get_role(AUTO_ROLE_ID)
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuraci√≥n de Bienvenida",
            color=0x00ffff,
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.add_field(
            name="üéâ Canal de Bienvenida",
            value=welcome_channel.mention if welcome_channel else "‚ùå No encontrado",
            inline=False
        )
        
        embed.add_field(
            name="üí¨ Canal General",
            value=general_channel.mention if general_channel else "‚ùå No encontrado",
            inline=False
        )
        
        embed.add_field(
            name="üñºÔ∏è Imagen de Fondo",
            value=f"üìÅ Archivo: `{self.background_image}`\n{'‚úÖ Encontrada' if background_exists else '‚ùå No encontrada'}",
            inline=False
        )
        
        embed.add_field(
            name="üé® Configuraci√≥n de Avatar",
            value=f"üìè Tama√±o: {self.avatar_size}px\nüìç Posici√≥n: {self.avatar_position}\nüñºÔ∏è Borde: {self.avatar_border_size}px {'‚úÖ' if self.avatar_border_size > 0 else '‚ùå'}",
            inline=False
        )
        
        embed.add_field(
            name="üé≠ Sistema de Roles",
            value=(
                f"üéØ **Rol Base:** {base_role.mention if base_role else '‚ùå No encontrado'}\n"
                f"‚öôÔ∏è **Rol Autom√°tico:** {auto_role.mention if auto_role else '‚ùå No encontrado'}\n"
                f"üëë **Prefijo de Rango:** `{RANGO_PREFIX}`"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß Comandos",
            value="`!welcome_test` - Probar sistema\n`!welcome_config` - Ver configuraci√≥n\n`!welcome_avatar` - Configurar avatar\n`!roles_check` - Estado de roles",
            inline=False
        )
        
        await ctx.send(embed=embed)

    @commands.command(name="welcome_avatar")
    @commands.has_permissions(administrator=True)
    async def configure_avatar(self, ctx, setting=None, *, value=None):
        """Configura el avatar superpuesto"""
        if not setting:
            embed = discord.Embed(
                title="üé® Configuraci√≥n de Avatar",
                color=0x00ffff,
                timestamp=datetime.now(timezone.utc)
            )
            
            embed.add_field(name="üìè Tama√±o", value=f"`{self.avatar_size}` p√≠xeles", inline=True)
            embed.add_field(name="üìç Posici√≥n", value=f"`{self.avatar_position}`", inline=True)
            embed.add_field(name="üñºÔ∏è Borde", value=f"`{self.avatar_border_size}px`", inline=True)
            
            if self.avatar_position == "custom":
                embed.add_field(
                    name="üìê Offset personalizado",
                    value=f"X: `{self.avatar_x_offset}`, Y: `{self.avatar_y_offset}`",
                    inline=False
                )
            
            embed.add_field(
                name="üí° Comandos disponibles",
                value="`!welcome_avatar size <p√≠xeles>`\n`!welcome_avatar position <center|top|bottom|custom>`\n`!welcome_avatar offset <x> <y>`\n`!welcome_avatar border <p√≠xeles>`",
                inline=False
            )
            
            await ctx.send(embed=embed)
            return
        
        setting = setting.lower()
        
        if setting == "size":
            if not value:
                await ctx.send("‚ùå Usa: `!welcome_avatar size <n√∫mero>`")
                return
            try:
                new_size = int(value)
                if 50 <= new_size <= 500:
                    self.avatar_size = new_size
                    await ctx.send(f"‚úÖ Tama√±o de avatar cambiado a **{new_size}px**")
                else:
                    await ctx.send("‚ùå El tama√±o debe estar entre 50 y 500 p√≠xeles")
            except ValueError:
                await ctx.send("‚ùå Usa: `!welcome_avatar size <n√∫mero>`")
        
        elif setting == "position":
            positions = ["center", "top", "bottom", "custom"]
            if value and value.lower() in positions:
                self.avatar_position = value.lower()
                await ctx.send(f"‚úÖ Posici√≥n cambiada a **{value.lower()}**")
            else:
                await ctx.send(f"‚ùå Posiciones v√°lidas: {', '.join(positions)}")
        
        elif setting == "offset":
            if self.avatar_position != "custom":
                await ctx.send("‚ùå Los offsets solo funcionan con posici√≥n 'custom'")
                return
            if not value:
                await ctx.send("‚ùå Usa: `!welcome_avatar offset <x> <y>`")
                return
            try:
                offsets = value.split()
                if len(offsets) == 2:
                    x_offset = int(offsets[0])
                    y_offset = int(offsets[1])
                    if -300 <= x_offset <= 300 and -300 <= y_offset <= 300:
                        self.avatar_x_offset = x_offset
                        self.avatar_y_offset = y_offset
                        await ctx.send(f"‚úÖ Offset cambiado a X:**{x_offset}**, Y:**{y_offset}**")
                    else:
                        await ctx.send("‚ùå Los offsets deben estar entre -300 y 300")
                else:
                    await ctx.send("‚ùå Usa: `!welcome_avatar offset <x> <y>`")
            except ValueError:
                await ctx.send("‚ùå Usa n√∫meros v√°lidos: `!welcome_avatar offset <x> <y>`")
        
        elif setting == "border":
            if not value:
                await ctx.send("‚ùå Usa: `!welcome_avatar border <n√∫mero>`")
                return
            try:
                border_size = int(value)
                if 0 <= border_size <= 20:
                    self.avatar_border_size = border_size
                    await ctx.send(f"‚úÖ Borde cambiado a **{border_size}px**")
                else:
                    await ctx.send("‚ùå El borde debe estar entre 0 y 20 p√≠xeles")
            except ValueError:
                await ctx.send("‚ùå Usa: `!welcome_avatar border <n√∫mero>`")
        
        else:
            await ctx.send("‚ùå Configuraci√≥n no v√°lida. Usa `!welcome_avatar` para ver opciones.")

    @commands.Cog.listener()
    async def on_ready(self):
        import asyncio
        print("[WelcomeSystem] Sistema de bienvenida con roles autom√°ticos listo")
        
        welcome_channel = self.bot.get_channel(WELCOME_CHANNEL_ID)
        general_channel = self.bot.get_channel(GENERAL_CHANNEL_ID)
        base_role = None
        auto_role = None
        
        # Obtener roles si hay guilds disponibles
        if self.bot.guilds:
            guild = self.bot.guilds[0]  # Usar el primer servidor
            base_role = guild.get_role(BASE_ROLE_ID)
            auto_role = guild.get_role(AUTO_ROLE_ID)
        
        # Verificar canales
        if not welcome_channel:
            print(f"‚ö†Ô∏è Canal de bienvenida {WELCOME_CHANNEL_ID} no encontrado")
        if not general_channel:
            print(f"‚ö†Ô∏è Canal general {GENERAL_CHANNEL_ID} no encontrado")
        
        # Verificar roles
        if not base_role:
            print(f"‚ö†Ô∏è Rol base {BASE_ROLE_ID} no encontrado")
        if not auto_role:
            print(f"‚ö†Ô∏è Rol autom√°tico {AUTO_ROLE_ID} no encontrado")
        
        # Verificar directorios e im√°genes
        if not os.path.exists(self.background_dir):
            print(f"‚ö†Ô∏è Directorio {self.background_dir} no encontrado, cre√°ndolo...")
            os.makedirs(self.background_dir, exist_ok=True)
        
        if os.path.exists(self.background_image):
            print(f"‚úÖ Imagen de fondo encontrada: {self.background_image}")
        else:
            print(f"‚ö†Ô∏è Imagen de fondo no encontrada: {self.background_image}")
            print("üí° Tip: Coloca tu imagen welcome.png en resources/images/")
        
        # Mostrar configuraci√≥n de roles
        print(f"üé≠ Sistema de roles configurado:")
        print(f"   üìç Rol base: {base_role.name if base_role else 'No encontrado'} (ID: {BASE_ROLE_ID})")
        print(f"   ‚öôÔ∏è Rol autom√°tico: {auto_role.name if auto_role else 'No encontrado'} (ID: {AUTO_ROLE_ID})")
        print(f"   üëë Prefijo de rango: '{RANGO_PREFIX}'")

async def setup(bot: commands.Bot):
    # Importar asyncio si no est√° disponible
    import asyncio
    await bot.add_cog(WelcomeSystem(bot))