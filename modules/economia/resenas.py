import discord
from discord.ext import commands
from discord import app_commands
from datetime import timedelta
import datetime
from typing import Dict, Set, Optional, List
from decimal import Decimal
import database

class MontoModal(discord.ui.Modal):
    def __init__(self, canal_id: int, usuario_id: int, precio_total: float):
        super().__init__(title="üí∞ Ingresar Monto de Pago")
        self.canal_id = canal_id
        self.usuario_id = usuario_id
        self.precio_total = precio_total
        
        self.monto_input = discord.ui.TextInput(
            label="Monto a pagar (en ‚Ç¨)",
            placeholder="Ejemplo: 0.80 o 1.50",
            required=True,
            max_length=10
        )
        self.add_item(self.monto_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Validar el monto
            monto_str = self.monto_input.value.replace(',', '.').strip()
            monto = float(monto_str)
            
            if monto < 0:
                embed_error = discord.Embed(
                    title="‚ùå Error",
                    description="El monto no puede ser negativo.",
                    color=0xff0000
                )
                await interaction.response.send_message(embed=embed_error, ephemeral=True)
                return
            
            if monto > 100:  # L√≠mite de seguridad
                embed_error = discord.Embed(
                    title="‚ùå Error", 
                    description="El monto no puede ser mayor a 100‚Ç¨.",
                    color=0xff0000
                )
                await interaction.response.send_message(embed=embed_error, ephemeral=True)
                return
            
            # Crear vista de confirmaci√≥n con el monto
            vista_confirmacion = ConfirmarTerminar(self.canal_id, self.usuario_id, self.precio_total, monto)
            
            # Embed de confirmaci√≥n
            confirm_embed = discord.Embed(
                title="‚ö†Ô∏è Confirmar Cierre de Rese√±a",
                description="**¬øEst√°s seguro de que quieres cerrar esta rese√±a?**\n\n"
                           f"üî∏ **Canal:** {interaction.channel.mention}\n"
                           f"üî∏ **Usuario:** <@{self.usuario_id}>\n"
                           f"üî∏ **Staff:** {interaction.user.mention}\n"
                           f"üî∏ **Precio calculado:** **{self.precio_total:.2f}‚Ç¨**\n"
                           f"üî∏ **Monto a pagar:** **{monto:.2f}‚Ç¨**\n\n"
                           f"‚ö†Ô∏è **Esta acci√≥n:**\n"
                           f"‚Ä¢ Cerrar√° permanentemente la rese√±a\n"
                           f"‚Ä¢ Eliminar√° el canal en 10 segundos\n"
                           f"‚Ä¢ Liberar√° al usuario del sistema\n"
                           f"‚Ä¢ Agregar√° {monto:.2f}‚Ç¨ al saldo del usuario\n"
                           f"‚Ä¢ **NO se puede deshacer**",
                color=0xff6b6b
            )
            confirm_embed.set_footer(text="Tienes 60 segundos para decidir")
            
            await interaction.response.send_message(embed=confirm_embed, view=vista_confirmacion, ephemeral=True)
            
        except ValueError:
            embed_error = discord.Embed(
                title="‚ùå Error de formato",
                description="Por favor ingresa un n√∫mero v√°lido. Ejemplos: `0.80`, `1.50`, `2.00`",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
        except Exception as e:
            embed_error = discord.Embed(
                title="‚ùå Error inesperado",
                description=f"Ocurri√≥ un error: {str(e)}",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)

class ConfirmarTerminar(discord.ui.View):
    def __init__(self, canal_id: int, usuario_id: int, precio_total: float, monto_pagar: float):
        super().__init__(timeout=60)
        self.canal_id = canal_id
        self.usuario_id = usuario_id
        self.precio_total = precio_total
        self.monto_pagar = monto_pagar

    @discord.ui.button(label="‚úÖ Confirmar", style=discord.ButtonStyle.danger)
    async def confirmar_terminar(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Agregar dinero al usuario en la base de datos
        try:
            # Obtener saldo actual del usuario
            saldo_actual = await database.get_user_balance(self.usuario_id)
            nuevo_saldo = saldo_actual + Decimal(str(self.monto_pagar))
            
            # Actualizar saldo
            await database.update_user_balance(
                self.usuario_id, 
                nuevo_saldo, 
                interaction.user.id,
                'PAGO_RESE√ëA',
                f'Pago por rese√±a completada: {self.monto_pagar:.2f}‚Ç¨'
            )
            
        except Exception as e:
            print(f"Error actualizando saldo: {e}")
            # Continuar con el proceso aunque falle el saldo
        
        # Embed con informaci√≥n de pago
        payment_embed = discord.Embed(
            title="üí∞ Informaci√≥n de Pago",
            description=f"**Rese√±a completada exitosamente**\n\n"
                       f"üî∏ **Canal:** {interaction.channel.mention}\n"
                       f"üî∏ **Usuario:** <@{self.usuario_id}>\n"
                       f"üî∏ **Precio calculado:** **{self.precio_total:.2f}‚Ç¨**\n"
                       f"üî∏ **Monto pagado:** **{self.monto_pagar:.2f}‚Ç¨**\n"
                       f"üî∏ **Staff responsable:** {interaction.user.mention}\n\n"
                       f"‚úÖ **El saldo ha sido agregado autom√°ticamente.**",
            color=0x00ff00,
            timestamp=datetime.datetime.now()
        )
        payment_embed.set_footer(text="El canal se cerrar√° en 10 segundos...")

        await interaction.response.edit_message(embed=payment_embed, view=None)
        
        # Enviar mensaje privado al usuario sobre su ganancia
        usuario = interaction.guild.get_member(self.usuario_id)
        if usuario:
            try:
                user_embed = discord.Embed(
                    title="‚úÖ Rese√±a Completada",
                    description=f"¬°Tu rese√±a ha sido completada exitosamente!\n\n"
                               f"üí∞ **Has ganado:** **{self.monto_pagar:.2f}‚Ç¨**\n"
                               f"üèÜ **Staff responsable:** {interaction.user.display_name}\n"
                               f"üí≥ **Saldo agregado autom√°ticamente a tu cuenta**\n\n"
                               f"Puedes verificar tu saldo usando el comando correspondiente.",
                    color=0x00ff00,
                    timestamp=datetime.datetime.now()
                )
                user_embed.set_footer(text=f"Servidor: {interaction.guild.name}")
                await usuario.send(embed=user_embed)
            except discord.Forbidden:
                pass  # Usuario tiene DMs cerrados
        
        # Countdown de 10 segundos
        for i in range(10, 0, -1):
            payment_embed.set_footer(text=f"El canal se cerrar√° en {i} segundos...")
            await interaction.edit_original_response(embed=payment_embed)
            await discord.utils.sleep_until(discord.utils.utcnow() + timedelta(seconds=1))

        # Liberar usuario del sistema
        bot = interaction.client
        resenas_cog = bot.get_cog("Resenas")
        
        if resenas_cog and usuario:
            for vista in resenas_cog.vistas_activas.values():
                if usuario.id in vista.usuarios_con_resena:
                    vista.usuarios_con_resena.remove(usuario.id)
                    
                    class FakeInteraction:
                        def __init__(self, guild):
                            self.guild = guild
                    
                    fake_interaction = FakeInteraction(interaction.guild)
                    await vista.actualizar_mensaje_original(fake_interaction)

        # Eliminar el canal
        await interaction.channel.delete(reason=f"Rese√±a completada para {usuario.display_name if usuario else 'Usuario desconocido'} - Pago: {self.monto_pagar:.2f}‚Ç¨")

    @discord.ui.button(label="‚ùå Cancelar", style=discord.ButtonStyle.secondary)
    async def cancelar_terminar(self, interaction: discord.Interaction, button: discord.ui.Button):
        cancel_embed = discord.Embed(
            title="‚úÖ Operaci√≥n Cancelada",
            description="El cierre de la rese√±a ha sido cancelado.",
            color=0x00ff00
        )
        await interaction.response.edit_message(embed=cancel_embed, view=None)

class Rese√±asBotones(discord.ui.View):
    def __init__(self, usuario_id: int, staff_role_ids: List[int], precio_inicial: float, secuencia_precios: List[float]):
        super().__init__(timeout=None)
        self.usuario_id = usuario_id
        self.staff_role_ids = staff_role_ids
        self.reclamado_por = None
        self.precio_actual = precio_inicial
        self.precio_inicial = precio_inicial
        self.secuencia_precios = secuencia_precios
        self.incrementos_aplicados = 0
        
        # Actualizar el label del canal con el precio
        self.actualizar_precio_display()
    
    def actualizar_precio_display(self):
        """Actualiza el precio mostrado en el t√≠tulo del embed"""
        pass  # Se manejar√° desde el embed principal
    
    def calcular_precio_decremento(self):
        """Calcula el precio que se debe decrementar"""
        if self.incrementos_aplicados == 0:
            return 0  # No se puede decrementar del precio inicial
        
        # Obtener el precio del incremento anterior
        if self.incrementos_aplicados <= len(self.secuencia_precios):
            precio_anterior = self.secuencia_precios[self.incrementos_aplicados - 1]
        else:
            # Si excede la secuencia, usar el √∫ltimo valor
            precio_anterior = self.secuencia_precios[-1]
        
        return precio_anterior

    @discord.ui.button(label="Reclamar", style=discord.ButtonStyle.success, emoji="üëã")
    async def reclamar_resena(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verificar que tenga alg√∫n rol de staff
        tiene_rol_staff = any(role.id in self.staff_role_ids for role in interaction.user.roles)
        if not tiene_rol_staff:
            embed_error = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo los miembros del staff pueden reclamar rese√±as.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return

        # Evitar que se reclame dos veces
        if self.reclamado_por:
            embed_error = discord.Embed(
                title="‚ö†Ô∏è Ya reclamado",
                description="Esta rese√±a ya fue reclamada por otro miembro del staff.",
                color=0xff9900
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return

        # Actualizar bot√≥n
        button.label = f"Reclamado por {interaction.user.display_name}"
        button.disabled = True
        button.emoji = "‚úÖ"
        
        # Guardar quien reclam√≥
        self.reclamado_por = interaction.user.id
        
        # Obtener usuario que solicit√≥ la rese√±a
        usuario_solicitante = interaction.guild.get_member(self.usuario_id)

        # Crear embed de reclamo
        embed = discord.Embed(
            title="üëã Rese√±a Reclamada",
            description=(
                f"üîπ **Usuario solicitante:** {usuario_solicitante.mention if usuario_solicitante else 'Desconocido'}\n"
                f"üîπ **Staff asignado:** {interaction.user.mention}\n\n"
                f"üí∞ **Precio actual:** **{self.precio_actual:.2f}‚Ç¨**\n"
                f"‚è∞ **Tiempo:** {datetime.datetime.now().strftime('%d/%m/%Y a las %H:%M')}"
            ),
            color=0xffaa00,
            timestamp=datetime.datetime.now()
        )
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text=f"Reclamado por {interaction.user.display_name}", icon_url=interaction.user.display_avatar.url)
        
        # Primero actualizar el mensaje original
        await interaction.response.edit_message(view=self)
        
        # Enviar embed al canal
        await interaction.followup.send(embed=embed)
        
        # Aviso directo al solicitante
        if usuario_solicitante:
            mensaje_adicional = (
                f"{usuario_solicitante.mention}, tu rese√±a ser√° atendida por {interaction.user.mention}."
            )
            await interaction.followup.send(mensaje_adicional)

    @discord.ui.button(label="Terminar", style=discord.ButtonStyle.danger, emoji="üîí")
    async def terminar_resena(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verificar que tenga alg√∫n rol de staff
        tiene_rol_staff = any(role.id in self.staff_role_ids for role in interaction.user.roles)
        if not tiene_rol_staff:
            embed_error = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo los miembros del staff pueden terminar rese√±as.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return

        # Abrir modal para ingresar monto
        modal = MontoModal(interaction.channel.id, self.usuario_id, self.precio_actual)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="Llamar", style=discord.ButtonStyle.primary, emoji="üìû")
    async def llamar_staff(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verificar que sea el usuario de la rese√±a
        if interaction.user.id != self.usuario_id:
            embed_error = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo el usuario de la rese√±a puede usar este bot√≥n.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return

        # Verificar que alguien haya reclamado la rese√±a
        if not self.reclamado_por:
            embed_error = discord.Embed(
                title="‚ùå Nadie ha reclamado",
                description="Primero alguien debe reclamar esta rese√±a.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return

        # Obtener el usuario que pidi√≥ la rese√±a y el que la reclam√≥
        usuario_resena = interaction.guild.get_member(self.usuario_id)
        staff_reclamo = interaction.guild.get_member(self.reclamado_por)
        
        nombre_usuario = usuario_resena.display_name if usuario_resena else "Usuario desconocido"
        
        # Mensaje de llamada
        mensaje = f"{staff_reclamo.mention if staff_reclamo else 'Staff'} **{nombre_usuario}** ya termin√≥ su rese√±a, es hora de comprobarla."
        
        await interaction.response.send_message(mensaje)

    @discord.ui.button(emoji="‚ûï", style=discord.ButtonStyle.success)
    async def agregar_resena(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verificar que tenga alg√∫n rol de staff
        tiene_rol_staff = any(role.id in self.staff_role_ids for role in interaction.user.roles)
        if not tiene_rol_staff:
            embed_error = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo los miembros del staff pueden agregar rese√±as.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return
        
        # Verificar que haya rese√±as disponibles en el sistema
        bot = interaction.client
        resenas_cog = bot.get_cog("Resenas")
        
        if not resenas_cog or not resenas_cog.vistas_activas:
            embed_error = discord.Embed(
                title="‚ùå Sin rese√±as disponibles",
                description="No hay m√°s rese√±as disponibles en el sistema.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return
        
        # Buscar la vista activa correspondiente
        vista_encontrada = None
        for vista in resenas_cog.vistas_activas.values():
            if vista.resenas_disponibles > 0:
                vista_encontrada = vista
                break
        
        if not vista_encontrada:
            embed_error = discord.Embed(
                title="‚ùå Sin rese√±as disponibles",
                description="No hay m√°s rese√±as disponibles en el sistema.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return
        
        # Calcular nuevo precio
        if self.incrementos_aplicados < len(self.secuencia_precios):
            incremento = self.secuencia_precios[self.incrementos_aplicados]
        else:
            # Si excede la secuencia, usar el √∫ltimo valor
            incremento = self.secuencia_precios[-1]
        
        precio_anterior = self.precio_actual
        self.precio_actual += incremento
        self.incrementos_aplicados += 1
        
        # Descontar una rese√±a del sistema
        vista_encontrada.resenas_disponibles -= 1
        vista_encontrada.actualizar_boton()
        
        # Actualizar mensaje principal del sistema
        class FakeInteraction:
            def __init__(self, guild):
                self.guild = guild
        
        fake_interaction = FakeInteraction(interaction.guild)
        await vista_encontrada.actualizar_mensaje_original(fake_interaction)
        
        # Actualizar el nombre del canal
        nuevo_nombre = f"resenas-{self.precio_actual:.2f}‚Ç¨-{interaction.channel.name.split('-')[-1]}"
        try:
            await interaction.channel.edit(name=nuevo_nombre)
        except discord.HTTPException:
            pass  # Ignorar errores de rate limit
        
        # Respuesta de √©xito
        embed_success = discord.Embed(
            title="‚úÖ Rese√±a agregada exitosamente",
            description=f"**Se ha agregado una rese√±a adicional**\n\n"
                       f"üí∞ **Precio anterior:** {precio_anterior:.2f}‚Ç¨\n"
                       f"üí∞ **Incremento:** +{incremento:.2f}‚Ç¨\n"
                       f"üí∞ **Precio actual:** **{self.precio_actual:.2f}‚Ç¨**\n"
                       f"üéØ **Rese√±as totales:** {self.incrementos_aplicados + 1}\n"
                       f"üìä **Agregado por:** {interaction.user.mention}",
            color=0x00ff00,
            timestamp=datetime.datetime.now()
        )
        
        await interaction.response.send_message(embed=embed_success)
        
        # Enviar notificaci√≥n al usuario de la rese√±a
        usuario = interaction.guild.get_member(self.usuario_id)
        if usuario:
            embed_notificacion = discord.Embed(
                title="‚ûï Rese√±a Adicional Agregada",
                description=f"El staff ha agregado una rese√±a adicional a tu solicitud.\n\n"
                           f"üí∞ **Nuevo precio:** **{self.precio_actual:.2f}‚Ç¨**\n"
                           f"üéØ **Rese√±as totales:** {self.incrementos_aplicados + 1}\n"
                           f"üìä **Agregado por:** {interaction.user.display_name}",
                color=0x00ff00
            )
            await interaction.followup.send(f"{usuario.mention}", embed=embed_notificacion)

    @discord.ui.button(emoji="‚ûñ", style=discord.ButtonStyle.danger)
    async def quitar_resena(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Verificar que tenga alg√∫n rol de staff
        tiene_rol_staff = any(role.id in self.staff_role_ids for role in interaction.user.roles)
        if not tiene_rol_staff:
            embed_error = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo los miembros del staff pueden quitar rese√±as.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return
        
        # Verificar que se pueda decrementar
        if self.incrementos_aplicados == 0:
            embed_error = discord.Embed(
                title="‚ùå No se puede decrementar",
                description=f"El precio ya est√° en el m√≠nimo inicial ({self.precio_inicial:.2f}‚Ç¨).",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)
            return
        
        # Calcular decremento
        decremento = self.calcular_precio_decremento()
        precio_anterior = self.precio_actual
        
        self.precio_actual -= decremento
        self.incrementos_aplicados -= 1
        
        # Devolver una rese√±a al sistema
        bot = interaction.client
        resenas_cog = bot.get_cog("Resenas")
        
        if resenas_cog and resenas_cog.vistas_activas:
            # Buscar la vista activa correspondiente
            for vista in resenas_cog.vistas_activas.values():
                vista.resenas_disponibles += 1
                vista.actualizar_boton()
                
                # Actualizar mensaje principal del sistema
                class FakeInteraction:
                    def __init__(self, guild):
                        self.guild = guild
                
                fake_interaction = FakeInteraction(interaction.guild)
                await vista.actualizar_mensaje_original(fake_interaction)
                break
        
        # Actualizar el nombre del canal
        nuevo_nombre = f"resenas-{self.precio_actual:.2f}‚Ç¨-{interaction.channel.name.split('-')[-1]}"
        try:
            await interaction.channel.edit(name=nuevo_nombre)
        except discord.HTTPException:
            pass  # Ignorar errores de rate limit
        
        # Respuesta de √©xito
        embed_success = discord.Embed(
            title="‚úÖ Rese√±a removida exitosamente",
            description=f"**Se ha removido una rese√±a**\n\n"
                       f"üí∞ **Precio anterior:** {precio_anterior:.2f}‚Ç¨\n"
                       f"üí∞ **Decremento:** -{decremento:.2f}‚Ç¨\n"
                       f"üí∞ **Precio actual:** **{self.precio_actual:.2f}‚Ç¨**\n"
                       f"üéØ **Rese√±as totales:** {self.incrementos_aplicados + 1}\n"
                       f"üìä **Removido por:** {interaction.user.mention}",
            color=0xff9900,
            timestamp=datetime.datetime.now()
        )
        
        await interaction.response.send_message(embed=embed_success)
        
        # Enviar notificaci√≥n al usuario de la rese√±a
        usuario = interaction.guild.get_member(self.usuario_id)
        if usuario:
            embed_notificacion = discord.Embed(
                title="‚ûñ Rese√±a Removida",
                description=f"El staff ha removido una rese√±a de tu solicitud.\n\n"
                           f"üí∞ **Nuevo precio:** **{self.precio_actual:.2f}‚Ç¨**\n"
                           f"üéØ **Rese√±as totales:** {self.incrementos_aplicados + 1}\n"
                           f"üìä **Removido por:** {interaction.user.display_name}",
                color=0xff9900
            )
            await interaction.followup.send(f"{usuario.mention}", embed=embed_notificacion)

class ResenasView(discord.ui.View):
    def __init__(self, resenas_disponibles: int, canal_resenas_id: int, staff_role_ids: List[int], mensaje_id: int = None):
        super().__init__(timeout=None)
        self.resenas_disponibles = resenas_disponibles
        self.resenas_originales = resenas_disponibles
        self.usuarios_con_resena: Set[int] = set()
        self.canal_resenas_id = canal_resenas_id
        self.staff_role_ids = staff_role_ids
        self.mensaje_id = mensaje_id
        
        self.actualizar_boton()
    
    def actualizar_boton(self):
        """Actualiza el estado del bot√≥n seg√∫n los cupos disponibles"""
        boton = self.children[0] if self.children else None
        
        if self.resenas_disponibles > 0:
            if boton:
                boton.label = "Quiero rese√±as"
                boton.disabled = False
                boton.style = discord.ButtonStyle.primary
        else:
            if boton:
                boton.label = "Rese√±as agotadas"
                boton.disabled = True
                boton.style = discord.ButtonStyle.secondary
    
    def calcular_precio_y_secuencia(self, usuario: discord.Member) -> tuple:
        """Calcula el precio inicial y secuencia de precios basado en los roles del usuario"""
        # Roles VIP (precio inicial m√°s bajo)
        roles_vip = [1406360634643316746, 1400106792196898893]
        
        # Roles especiales (secuencia diferente)
        roles_especiales = [
            1400106792226127922, 1400106792226127923, 1400106792280658061, 
            1400106792280658062, 1400106792280658063, 1400106792280658064, 
            1400106792280658065, 1400106792280658066, 1400106792280658067
        ]
        
        user_role_ids = [role.id for role in usuario.roles]
        
        if any(role_id in user_role_ids for role_id in roles_especiales):
            # Secuencia especial: 0.5, 0.5, 0.75, 1‚Ç¨, 1‚Ç¨, 1‚Ç¨...
            precio_inicial = 0.5
            secuencia = [0.5, 0.75] + [1.0] * 10  # Agregar varios 1‚Ç¨ para futuras expansiones
        elif any(role_id in user_role_ids for role_id in roles_vip):
            # Secuencia VIP: 0.3, 0.5, 0.75, 0.75, 0.75...
            precio_inicial = 0.3
            secuencia = [0.5, 0.75] + [0.75] * 10
        else:
            # Secuencia normal: 0.5, 0.5, 0.75, 0.75, 0.75...
            precio_inicial = 0.5
            secuencia = [0.5, 0.75] + [0.75] * 10
        
        return precio_inicial, secuencia
    
    async def actualizar_mensaje_original(self, interaction: discord.Interaction):
        """Actualiza el mensaje original con el nuevo estado"""
        try:
            embed_actualizado = discord.Embed(
                title="üìù Sistema de Rese√±as",
                description=f"Hay **{self.resenas_disponibles}** rese√±as disponibles de **{self.resenas_originales}** totales.",
                color=0x0099ff
            )
            
            if self.resenas_disponibles > 0:
                embed_actualizado.add_field(
                    name="Estado", 
                    value="‚úÖ Disponible", 
                    inline=True
                )
            else:
                embed_actualizado.add_field(
                    name="Estado", 
                    value="‚ùå Agotado", 
                    inline=True
                )
            
            embed_actualizado.add_field(
                name="Instrucciones", 
                value="Presiona el bot√≥n para solicitar una rese√±a", 
                inline=True
            )
            
            canal = interaction.guild.get_channel(self.canal_resenas_id)
            if canal and self.mensaje_id:
                try:
                    mensaje = await canal.fetch_message(self.mensaje_id)
                    await mensaje.edit(embed=embed_actualizado, view=self)
                except discord.NotFound:
                    nuevo_mensaje = await canal.send(embed=embed_actualizado, view=self)
                    self.mensaje_id = nuevo_mensaje.id
                except discord.HTTPException:
                    pass
            
        except Exception as e:
            print(f"Error al actualizar mensaje: {e}")
    
    @discord.ui.button(label="Quiero rese√±as", style=discord.ButtonStyle.primary)
    async def solicitar_resena(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Maneja la solicitud de rese√±a cuando se presiona el bot√≥n"""
        
        if interaction.user.id in self.usuarios_con_resena:
            embed = discord.Embed(
                title="‚ö†Ô∏è Rese√±a ya solicitada",
                description="Ya tienes una rese√±a en curso. No puedes solicitar otra hasta que se complete la actual.",
                color=0xff9900
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        if self.resenas_disponibles <= 0:
            embed = discord.Embed(
                title="‚ùå Sin cupos disponibles",
                description="Ya no hay rese√±as disponibles en este momento.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        try:
            await interaction.response.defer(ephemeral=True)
            
            guild = interaction.guild
            
            # Calcular precio y secuencia para este usuario
            precio_inicial, secuencia_precios = self.calcular_precio_y_secuencia(interaction.user)
            
            # Buscar o crear la categor√≠a "üìö RESENAS"
            categoria = discord.utils.get(guild.categories, name="üìö RESENAS")
            if not categoria:
                categoria = await guild.create_category("üìö RESENAS")
            
            # Configurar permisos del canal (sin menciones para el usuario)
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                interaction.user: discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=True,
                    read_message_history=True,
                    mention_everyone=False,
                    use_application_commands=False
                ),
                guild.me: discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=True,
                    manage_messages=True,
                    embed_links=True
                )
            }
            
            # Agregar permisos para los roles de staff
            for role_id in self.staff_role_ids:
                staff_role = guild.get_role(role_id)
                if staff_role:
                    overwrites[staff_role] = discord.PermissionOverwrite(
                        read_messages=True,
                        send_messages=True,
                        read_message_history=True,
                        manage_messages=True
                    )
            
            # Crear el canal con el formato mejorado
            nombre_usuario = interaction.user.name.replace(" ", "-").lower()
            nombre_usuario = ''.join(c for c in nombre_usuario if c.isalnum() or c in '-_')
            nombre_canal = f"resenas-{precio_inicial:.1f}‚Ç¨-{nombre_usuario}"
            
            canal_ticket = await guild.create_text_channel(
                name=nombre_canal,
                overwrites=overwrites,
                category=categoria,
                topic=f"Rese√±a para {interaction.user.display_name} - Precio inicial: {precio_inicial:.2f}‚Ç¨"
            )
            
            # Crear embed de instrucciones
            embed_instrucciones = discord.Embed(
                title="üìù Instrucciones para dejar una rese√±a en Google",
                description="Para que tu rese√±a sea v√°lida y profesional, sigue estos dos pasos:",
                color=0x4285f4
            )
            
            embed_instrucciones.add_field(
                name="1Ô∏è‚É£ Cambia tu nombre de Google",
                value="Si usas un nombre como \"xXPepeproXx\", tu rese√±a puede parecer falsa. Debes usar tu nombre real.\n"
                      "‚Ä¢ Abre este enlace: https://myaccount.google.com/profile\n"
                      "‚Ä¢ Haz clic en tu nombre y c√°mbialo por uno real (ej: Laura Morales o Javier Ortega).\n"
                      "‚Ä¢ Evita apodos o nombres de videojuegos.\n"
                      "‚Ä¢ Guarda los cambios.",
                inline=False
            )
            
            embed_instrucciones.add_field(
                name="2Ô∏è‚É£ Deja la rese√±a correctamente",
                value="‚Ä¢ Un miembro del equipo te pasar√° el enlace del sitio en Google Maps.\n"
                      "‚Ä¢ √Åbrelo y pulsa \"Escribir una rese√±a\".\n"
                      "‚Ä¢ Pon 5 estrellas.\n"
                      "‚Ä¢ Escribe un comentario cre√≠ble, relacionado con el local (ej: buena atenci√≥n, limpieza, precio, etc.).\n\n"
                      "**Tu nombre y rese√±a ser√°n visibles para todos. Aseg√∫rate de que parezca real y profesional.**",
                inline=False
            )
            
            # Agregar informaci√≥n de precio
            embed_instrucciones.add_field(
                name="üí∞ Informaci√≥n de Pago",
                value=f"**Precio por esta rese√±a:** {precio_inicial:.2f}‚Ç¨\n"
                      "‚Ä¢ El staff puede agregar rese√±as adicionales si es necesario\n"
                      "‚Ä¢ El pago se realizar√° al completar todas las rese√±as",
                inline=False
            )
            
            # Crear menciones de los roles de staff
            menciones_staff = []
            for role_id in self.staff_role_ids:
                staff_role = guild.get_role(role_id)
                if staff_role:
                    menciones_staff.append(staff_role.mention)
            
            # Mensaje con menciones
            mensaje_menciones = f"{interaction.user.mention}"
            if menciones_staff:
                mensaje_menciones += f" {' '.join(menciones_staff)}"
            
            # Crear vista con botones para el canal
            vista_botones = Rese√±asBotones(interaction.user.id, self.staff_role_ids, precio_inicial, secuencia_precios)
            
            await canal_ticket.send(mensaje_menciones, embed=embed_instrucciones, view=vista_botones)
            
            # Actualizar el estado
            self.resenas_disponibles -= 1
            self.usuarios_con_resena.add(interaction.user.id)
            
            # Actualizar el bot√≥n
            self.actualizar_boton()
            
            # Actualizar el mensaje original
            await self.actualizar_mensaje_original(interaction)
            
            # Responder al usuario
            embed_respuesta = discord.Embed(
                title="‚úÖ Canal creado exitosamente",
                description=f"Se ha creado tu canal de rese√±a: {canal_ticket.mention}\n"
                           f"üí∞ **Precio inicial:** {precio_inicial:.2f}‚Ç¨",
                color=0x00ff00
            )
            
            await interaction.followup.send(embed=embed_respuesta, ephemeral=True)
            
        except discord.Forbidden:
            embed_error = discord.Embed(
                title="‚ùå Error de permisos",
                description="No tengo permisos suficientes para crear canales o categor√≠as.",
                color=0xff0000
            )
            await interaction.followup.send(embed=embed_error, ephemeral=True)
        
        except Exception as e:
            embed_error = discord.Embed(
                title="‚ùå Error inesperado",
                description=f"Ocurri√≥ un error al crear el canal: {str(e)}",
                color=0xff0000
            )
            await interaction.followup.send(embed=embed_error, ephemeral=True)

class Resenas(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.vistas_activas: Dict[int, ResenasView] = {}
        
        # üîß CONFIGURACI√ìN MANUAL - CAMBIA ESTOS IDs POR LOS DE TU SERVIDOR
        self.CANAL_RESENAS_ID = 1400106793551663190  # ID del canal donde se publican las rese√±as
        self.ROL_NOTIFICACION_RESENAS_ID = 1400106792196898891 # ID del rol que se menciona al usuario al publicar rese√±as
        self.STAFF_ROLE_IDS = [
            1400106792280658070,  # ID del primer rol de staff/moderaci√≥n (OWNER)
        ]
    
    @commands.command(name="help_resenas")
    @commands.has_permissions(manage_channels=True)
    async def help_resenas(self, ctx):
        """Muestra todos los comandos disponibles del sistema de rese√±as"""
        
        embed = discord.Embed(
            title="üìñ Ayuda - Sistema de Rese√±as",
            description="Lista completa de comandos disponibles para el sistema de rese√±as.",
            color=0x4285f4,
            timestamp=datetime.datetime.now()
        )
        
        # Comandos principales
        embed.add_field(
            name="üöÄ **Comandos Principales**",
            value=(
                "`!resenas <n√∫mero>` - Inicia el sistema con el n√∫mero especificado de rese√±as\n"
                "‚Ä¢ **Ejemplo:** `!resenas 5`\n"
                "‚Ä¢ **Permisos:** Administrador\n"
                "‚Ä¢ **Rango:** 1-50 rese√±as\n\n"
                
                "`!estado_resenas` - Muestra el estado actual de todas las sesiones activas\n"
                "‚Ä¢ **Permisos:** Administrador\n"
                "‚Ä¢ **Info mostrada:** Cupos disponibles, usuarios activos\n\n"
            ),
            inline=False
        )
        
        # Comandos de gesti√≥n
        embed.add_field(
            name="‚öôÔ∏è **Comandos de Gesti√≥n**",
            value=(
                "`!cerrar_resena [@usuario]` - Cierra la rese√±a de un usuario\n"
                "‚Ä¢ **Uso 1:** `!cerrar_resena @Usuario` (desde cualquier canal)\n"
                "‚Ä¢ **Uso 2:** `!cerrar_resena` (dentro del canal de rese√±a)\n"
                "‚Ä¢ **Permisos:** Gestionar canales\n\n"
                
                "`!reset_resenas` - Reinicia completamente el sistema\n"
                "‚Ä¢ **Efecto:** Elimina todas las sesiones activas\n"
                "‚Ä¢ **Permisos:** Administrador\n"
                "‚Ä¢ **‚ö†Ô∏è Irreversible**\n\n"
            ),
            inline=False
        )
        
        # Comandos de mantenimiento
        embed.add_field(
            name="üîß **Comandos de Mantenimiento**",
            value=(
                "`!actualizar_resenas` - Fuerza la actualizaci√≥n de mensajes\n"
                "‚Ä¢ **Uso:** Cuando los mensajes no se actualizan correctamente\n"
                "‚Ä¢ **Permisos:** Administrador\n\n"
                
                "`!config_info` - Muestra la configuraci√≥n actual\n"
                "‚Ä¢ **Info mostrada:** Canal configurado, roles de staff, sistemas activos\n"
                "‚Ä¢ **Permisos:** Administrador\n\n"
            ),
            inline=False
        )
        
        # Sistema de precios
        embed.add_field(
            name="üí∞ **Sistema de Precios**",
            value=(
                "‚Ä¢ **Usuarios VIP:** 0.3‚Ç¨ ‚Üí 0.8‚Ç¨ ‚Üí 1.55‚Ç¨ ‚Üí 2.30‚Ç¨...\n"
                "‚Ä¢ **Usuarios normales:** 0.5‚Ç¨ ‚Üí 1.0‚Ç¨ ‚Üí 1.75‚Ç¨ ‚Üí 2.50‚Ç¨...\n"
                "‚Ä¢ **Usuarios especiales:** 0.5‚Ç¨ ‚Üí 1.0‚Ç¨ ‚Üí 1.75‚Ç¨ ‚Üí 2.75‚Ç¨ ‚Üí 3.75‚Ç¨...\n"
                "‚Ä¢ **Botones +/-:** Agregar/quitar rese√±as con precios din√°micos\n"
                "‚Ä¢ **Formato canal:** resenas-[precio]‚Ç¨-[usuario]\n"
                "‚Ä¢ **Pago autom√°tico:** El dinero se agrega autom√°ticamente al saldo\n\n"
            ),
            inline=False
        )
        
        # Comandos de utilidad
        embed.add_field(
            name="üõ†Ô∏è **Comandos de Utilidad**",
            value=(
                "`!resenas_test` - Verifica que el m√≥dulo funcione correctamente\n"
                "‚Ä¢ **Uso:** Diagn√≥stico del sistema\n"
                "‚Ä¢ **Permisos:** Administrador\n\n"
                
                "`!help_resenas` - Muestra esta ayuda\n"
                "‚Ä¢ **Permisos:** Gestionar canales\n\n"
            ),
            inline=False
        )
        
        # Informaci√≥n adicional
        embed.add_field(
            name="‚ÑπÔ∏è **Informaci√≥n Importante**",
            value=(
                "‚Ä¢ **Configuraci√≥n:** Los IDs de canales y roles se configuran en el c√≥digo\n"
                "‚Ä¢ **Categor√≠a:** Se crea autom√°ticamente 'üìö RESENAS'\n"
                "‚Ä¢ **Permisos:** El bot necesita gestionar canales y categor√≠as\n"
                "‚Ä¢ **L√≠mites:** M√°ximo 50 rese√±as por sesi√≥n\n"
                "‚Ä¢ **Estados:** Los usuarios solo pueden tener una rese√±a activa\n"
                "‚Ä¢ **Menciones:** Los usuarios no pueden hacer menciones en los canales\n"
                "‚Ä¢ **Base de datos:** Integrado con sistema econ√≥mico autom√°tico"
            ),
            inline=False
        )
        
        # Flujo del sistema
        embed.add_field(
            name="üîÑ **Flujo del Sistema**",
            value=(
                "1Ô∏è‚É£ Admin ejecuta `!resenas <num>`\n"
                "2Ô∏è‚É£ Se publica mensaje con bot√≥n en canal configurado\n"
                "3Ô∏è‚É£ Usuarios hacen clic en 'Quiero rese√±as'\n"
                "4Ô∏è‚É£ Se crea canal individual con precio din√°mico\n"
                "5Ô∏è‚É£ Staff reclama la rese√±a con bot√≥n 'Reclamar'\n"
                "6Ô∏è‚É£ Staff puede usar botones ‚ûï/‚ûñ para ajustar precio\n"
                "7Ô∏è‚É£ Usuario completa rese√±a y usa 'Llamar'\n"
                "8Ô∏è‚É£ Staff usa 'Terminar' ‚Üí ingresa monto ‚Üí dinero se agrega autom√°ticamente"
            ),
            inline=False
        )
        
        embed.set_footer(
            text=f"Solicitado por {ctx.author.display_name}",
            icon_url=ctx.author.display_avatar.url
        )
        
        await ctx.send(embed=embed)

    # Tambi√©n agregar el manejo de errores para este comando
    @help_resenas.error
    async def help_resenas_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed = discord.Embed(
                title="‚ùå Sin permisos",
                description="Necesitas permisos de 'Gestionar canales' para ver la ayuda del sistema de rese√±as.",
                color=0xff0000
            )
            await ctx.send(embed=embed)

    @commands.command(name="resenas")
    @commands.has_permissions(administrator=True)
    async def comando_resenas(self, ctx, num_resenas: int):
        """
        Comando para administradores que inicia el sistema de rese√±as
        
        Uso: !resenas <n√∫mero>
        Ejemplo: !resenas 3
        """
        
        if num_resenas <= 0:
            embed_error = discord.Embed(
                title="‚ùå N√∫mero inv√°lido",
                description="El n√∫mero de rese√±as debe ser mayor a 0.",
                color=0xff0000
            )
            await ctx.send(embed=embed_error)
            return
        
        if num_resenas > 50:
            embed_error = discord.Embed(
                title="‚ùå N√∫mero muy alto",
                description="Por seguridad, el m√°ximo de rese√±as es 50.",
                color=0xff0000
            )
            await ctx.send(embed=embed_error)
            return
        
        canal_resenas = self.bot.get_channel(self.CANAL_RESENAS_ID)
        if not canal_resenas:
            embed_error = discord.Embed(
                title="‚ùå Canal no encontrado",
                description=f"No se pudo encontrar el canal con ID: {self.CANAL_RESENAS_ID}\n"
                           "Verifica que el ID sea correcto y que el bot tenga acceso.",
                color=0xff0000
            )
            await ctx.send(embed=embed_error)
            return
        
        roles_validos = []
        for role_id in self.STAFF_ROLE_IDS:
            role = ctx.guild.get_role(role_id)
            if role:
                roles_validos.append(role)
        
        embed_confirmacion = discord.Embed(
            title="‚úÖ Sistema de rese√±as iniciado",
            description=f"Se han configurado **{num_resenas}** rese√±as disponibles.",
            color=0x00ff00
        )
        embed_confirmacion.add_field(
            name="Canal de publicaci√≥n", 
            value=canal_resenas.mention, 
            inline=True
        )
        
        if roles_validos:
            roles_texto = ", ".join([role.mention for role in roles_validos])
            embed_confirmacion.add_field(
                name="Roles de staff", 
                value=roles_texto, 
                inline=True
            )
        else:
            embed_confirmacion.add_field(
                name="‚ö†Ô∏è Roles de staff", 
                value="No se encontraron roles v√°lidos", 
                inline=True
            )
        
        await ctx.send(embed=embed_confirmacion)
        
        embed_publico = discord.Embed(
            title="üìù Sistema de Rese√±as",
            description=f"Hay **{num_resenas}** rese√±as disponibles de **{num_resenas}** totales.",
            color=0x0099ff
        )
        embed_publico.add_field(
            name="Estado", 
            value="‚úÖ Disponible", 
            inline=True
        )
        embed_publico.add_field(
            name="Instrucciones", 
            value="Presiona el bot√≥n para solicitar una rese√±a", 
            inline=True
        )
        
        rol_notificacion = ctx.guild.get_role(self.ROL_NOTIFICACION_RESENAS_ID)
        mensaje_notificacion = ""
        if rol_notificacion:
            mensaje_notificacion = rol_notificacion.mention

        mensaje_publico = await canal_resenas.send(mensaje_notificacion, embed=embed_publico)
        
        vista_resenas = ResenasView(num_resenas, self.CANAL_RESENAS_ID, self.STAFF_ROLE_IDS, mensaje_publico.id)
        self.vistas_activas[canal_resenas.id] = vista_resenas
        
        await mensaje_publico.edit(embed=embed_publico, view=vista_resenas)
    
    @commands.command(name="estado_resenas")
    @commands.has_permissions(administrator=True)
    async def estado_resenas(self, ctx):
        """Muestra el estado actual del sistema de rese√±as"""
        if not self.vistas_activas:
            embed = discord.Embed(
                title="üìä Estado del Sistema",
                description="No hay sesiones de rese√±as activas.",
                color=0x999999
            )
            await ctx.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üìä Estado del Sistema de Rese√±as",
            color=0x0099ff
        )
        
        for canal_id, vista in self.vistas_activas.items():
            canal = self.bot.get_channel(canal_id)
            canal_nombre = canal.name if canal else f"Canal {canal_id}"
            
            embed.add_field(
                name=f"#{canal_nombre}",
                value=f"**Disponibles:** {vista.resenas_disponibles}/{vista.resenas_originales}\n"
                      f"**Usuarios activos:** {len(vista.usuarios_con_resena)}\n"
                      f"**Mensaje ID:** {vista.mensaje_id}",
                inline=True
            )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="cerrar_resena")
    @commands.has_permissions(manage_channels=True)
    async def cerrar_resena(self, ctx, usuario: discord.Member = None):
        """Cierra el canal de rese√±a de un usuario y lo libera del sistema"""
        canal_actual = ctx.channel
        
        if not usuario and canal_actual.name.startswith("resenas-"):
            nombre_usuario_con_precio = canal_actual.name.replace("resenas-", "")
            # Extraer el nombre despu√©s del precio (formato: precio‚Ç¨-usuario)
            if "‚Ç¨-" in nombre_usuario_con_precio:
                nombre_usuario = nombre_usuario_con_precio.split("‚Ç¨-", 1)[1]
                for member in ctx.guild.members:
                    if member.name.lower() == nombre_usuario.lower():
                        usuario = member
                        break
        
        if not usuario:
            embed_error = discord.Embed(
                title="‚ùå Usuario no especificado",
                description="Debes mencionar al usuario o usar el comando en su canal de rese√±a.",
                color=0xff0000
            )
            await ctx.send(embed=embed_error)
            return
        
        usuario_liberado = False
        for vista in self.vistas_activas.values():
            if usuario.id in vista.usuarios_con_resena:
                vista.usuarios_con_resena.remove(usuario.id)
                usuario_liberado = True
                
                class FakeInteraction:
                    def __init__(self, guild):
                        self.guild = guild
                
                fake_interaction = FakeInteraction(ctx.guild)
                await vista.actualizar_mensaje_original(fake_interaction)
        
        if canal_actual.name.startswith("resenas-"):
            embed_cierre = discord.Embed(
                title="‚úÖ Rese√±a completada",
                description=f"La rese√±a de {usuario.display_name} ha sido completada.",
                color=0x00ff00
            )
            await ctx.send(embed=embed_cierre)
            
            await discord.utils.sleep_until(discord.utils.utcnow() + timedelta(seconds=3))
            await canal_actual.delete(reason=f"Rese√±a completada para {usuario.display_name}")
        else:
            if usuario_liberado:
                embed = discord.Embed(
                    title="‚úÖ Usuario liberado",
                    description=f"{usuario.display_name} ha sido liberado del sistema de rese√±as.",
                    color=0x00ff00
                )
            else:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Usuario no encontrado",
                    description=f"{usuario.display_name} no ten√≠a rese√±as activas.",
                    color=0xff9900
                )
            await ctx.send(embed=embed)
    
    @commands.command(name="reset_resenas")
    @commands.has_permissions(administrator=True)
    async def reset_resenas(self, ctx):
        """Resetea el sistema de rese√±as, eliminando todas las vistas activas"""
        self.vistas_activas.clear()
        
        embed = discord.Embed(
            title="üîÑ Sistema reiniciado",
            description="Se han eliminado todas las sesiones de rese√±as activas.",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
    
    @commands.command(name="actualizar_resenas")
    @commands.has_permissions(administrator=True)
    async def actualizar_resenas(self, ctx):
        """Fuerza la actualizaci√≥n de todos los mensajes de rese√±as activos"""
        if not self.vistas_activas:
            embed = discord.Embed(
                title="‚ö†Ô∏è Sin sistemas activos",
                description="No hay sistemas de rese√±as activos para actualizar.",
                color=0xff9900
            )
            await ctx.send(embed=embed)
            return
        
        actualizados = 0
        for vista in self.vistas_activas.values():
            try:
                class FakeInteraction:
                    def __init__(self, guild):
                        self.guild = guild
                
                fake_interaction = FakeInteraction(ctx.guild)
                await vista.actualizar_mensaje_original(fake_interaction)
                actualizados += 1
            except Exception as e:
                print(f"Error actualizando vista: {e}")
        
        embed = discord.Embed(
            title="üîÑ Actualizaci√≥n completada",
            description=f"Se actualizaron {actualizados} mensajes de rese√±as.",
            color=0x00ff00
        )
        await ctx.send(embed=embed)
    
    @commands.command(name="config_info")
    @commands.has_permissions(administrator=True)
    async def config_info(self, ctx):
        """Muestra la configuraci√≥n actual del sistema"""
        embed = discord.Embed(
            title="‚öôÔ∏è Configuraci√≥n del Sistema",
            color=0x0099ff
        )
        
        canal = self.bot.get_channel(self.CANAL_RESENAS_ID)
        embed.add_field(
            name="Canal de rese√±as",
            value=f"{canal.mention if canal else 'No encontrado'} (ID: {self.CANAL_RESENAS_ID})",
            inline=False
        )
        
        roles_info = []
        for role_id in self.STAFF_ROLE_IDS:
            role = ctx.guild.get_role(role_id)
            if role:
                roles_info.append(f"{role.mention} (ID: {role_id})")
            else:
                roles_info.append(f"Rol no encontrado (ID: {role_id})")
        
        embed.add_field(
            name="Roles de staff",
            value="\n".join(roles_info) if roles_info else "No configurados",
            inline=False
        )
        
        # Estado del sistema
        embed.add_field(
            name="Sistemas activos",
            value=str(len(self.vistas_activas)),
            inline=True
        )
        
        # Informaci√≥n sobre roles especiales
        embed.add_field(
            name="üí∞ Sistema de Precios",
            value="‚Ä¢ **VIP:** Roles 1406360634643316746, 1400106792196898893\n"
                  "‚Ä¢ **Especiales:** Roles 1400106792226127922-1400106792280658067\n"
                  "‚Ä¢ **Normales:** Resto de usuarios\n"
                  "‚Ä¢ **Formato canal:** resenas-[precio]‚Ç¨-[usuario]\n"
                  "‚Ä¢ **Base de datos:** Integrado con sistema econ√≥mico",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    # Comando de prueba mantenido
    @commands.command(name="resenas_test")
    @commands.has_permissions(administrator=True)
    async def resenas_test(self, ctx):
        """Comando de prueba para administradores"""
        embed = discord.Embed(
            title="‚úÖ M√≥dulo Resenas funcionando",
            description="El m√≥dulo de rese√±as con sistema de precios din√°micos y pago autom√°tico est√° cargado correctamente.",
            color=0x00ff00
        )
        embed.add_field(
            name="Comandos disponibles",
            value="`!resenas <num>` - Iniciar sistema de rese√±as\n"
                  "`!estado_resenas` - Ver estado actual\n"
                  "`!cerrar_resena @usuario` - Cerrar rese√±a\n"
                  "`!reset_resenas` - Reiniciar sistema\n"
                  "`!actualizar_resenas` - Forzar actualizaci√≥n\n"
                  "`!config_info` - Ver configuraci√≥n actual",
            inline=False
        )
        embed.add_field(
            name="Nuevas funcionalidades",
            value="‚Ä¢ **Precios din√°micos** basados en roles de usuario\n"
                  "‚Ä¢ **Botones ‚ûï/‚ûñ** para agregar/quitar rese√±as\n"
                  "‚Ä¢ **Formato de canal mejorado** con precios\n"
                  "‚Ä¢ **Restricci√≥n de menciones** para usuarios\n"
                  "‚Ä¢ **Pago autom√°tico** integrado con base de datos\n"
                  "‚Ä¢ **Modal de monto** personalizable al cerrar\n"
                  "‚Ä¢ **Notificaciones** al usuario cuando se cambian rese√±as\n"
                  "‚Ä¢ **Sistema de roles especiales** con precios diferenciados",
            inline=False
        )
        await ctx.send(embed=embed)
    
    # Manejo de errores
    @comando_resenas.error
    async def resenas_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            embed = discord.Embed(
                title="‚ùå Argumento faltante",
                description="Uso correcto: `!resenas <n√∫mero>`\nEjemplo: `!resenas 3`",
                color=0xff0000
            )
            await ctx.send(embed=embed)
        elif isinstance(error, commands.BadArgument):
            embed = discord.Embed(
                title="‚ùå Argumento inv√°lido",
                description="El n√∫mero de rese√±as debe ser un n√∫mero entero v√°lido.",
                color=0xff0000
            )
            await ctx.send(embed=embed)
        elif isinstance(error, commands.MissingPermissions):
            embed = discord.Embed(
                title="‚ùå Sin permisos",
                description="Solo los administradores pueden usar este comando.",
                color=0xff0000
            )
            await ctx.send(embed=embed)

async def setup(bot: commands.Bot):
    await bot.add_cog(Resenas(bot))